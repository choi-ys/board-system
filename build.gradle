/**
 * [START] Root project build.gradle config
 * 참고 URL :
 *  - build.gradle 작성 : https://docs.spring.io/spring-boot/docs/2.5.2/gradle-plugin/reference/htmlsingle/
 *  - kotlin + multi module project 구성 : https://lannstark.tistory.com/149
 */
/**
 * buildscript : 스프링 부트 플러그인을 사용할 수 있는 기본 바탕 정의
 *  - SpringBoot Version 정보
 *  - kotlin Version 정보
 *  - Maven Repository 정보
 *  - Dependency 모듈 지정
 */
buildscript {
    ext {
        kotlinVersion = "1.5.20"
        springBootVersion = "2.4.8"
    }
    repositories {
        /** Apache Maven Central dependencies repository 사용을 위한 설정 */
        mavenCentral()
    }
    /** complie시점 부터 runtime까지 의존하는 라이브러리를 지정 */
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")

        /** Spring IO Platform의 Gradle Plugin인 dependency-management 사용을 위한 의존성 추가 */
        classpath("io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE")

        /**
         * 문제 : Kotlin과 JPA를 이용한 개발환경에서 설계한 Entity의 지연 로딩 불가
         * 원인 : Kotlin에서 Class는 기본 final 이므로 JPA에서 Entity를 상속받아 처리하는 proxy객체 사용 불가
         * 해결 : @Entity가 명시된 Class를 open시켜주는 `org.jetbrains.kotlin:kotlin-allopen` 의존성 추가
         */
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

/**
 * subprojects : root 하위에 있는 모듈에 공통적으로 적용될 내용을 기술
 *  - subprojects scope내에서 plugins 블록을 사용 불가하므로 apply plugin을 사용하여 plugin을 적용
 *    - core plugin 외의 community plugin의 버전은 앞서 plugins 블록에 선언한 버전을 참조
 *  - apply plugin : 적용할 Gradle 플러그인 명시
 */
subprojects {
    repositories {
        jcenter()
    }

    /**
     * org.jetbrains.kotlin:kotlin-gradle-plugin 의존성 필요
     */
    apply plugin: "kotlin" // Kotlin용 웹 프로젝트를 생성
    /**
     * kotlin-spring plugin
     *  - Spring Annotation으로 anootated 혹은 meta-anntated가 명시된 class와 metho를 open 상태로 변경
     *  - org.jetbrains.kotlin:kotlin-allopen 의존성 필요
     */
    apply plugin: "kotlin-spring"

    /**
     * kotlin 개발환경에서 JPA를 사용 시 필수 플러그인
     *  - kotlin-jpa : org.jetbrains.kotlin:kotlin-noarg 의존성의 플러그인
     *    - 주 생성자가 있는 경우 기본 생성자를 생성하지 않는 kotlin class 환경에서,
     *      JPA를 통해 관리되는 @Entity 클래스에 인자 없는 생성자를 자동 생성
     *
     *  - kotlin-allopen : org.jetbrains.kotlin:kotlin-allopen 의존성의 플러그인
     *    - 기본 final인 Kotlin Class 환경에서 Entity 객체로 부터 프록시 객체 생성 및 상속 받아
     *      Lazy loading을 사용하기 위한 @Entity 클래스의 open 설정 적용
     *
     *  - kotlin-kapt : annotation processing for kotlin
     *    - 자바의 annotations를 처리시점에 kotlin class의 anootation 처리를 포함
     *      (JVM 기동 시점에 Kotlin에 명시된 Annotation을 포함)
     */
    apply plugin: "kotlin-allopen"
    allOpen {
        annotation "javax.persistence.Entity"
    }

    group = "io.test" // project 생성 시 group ID
    sourceCompatibility = 11 // 컴파일 java 버전 명시

    /** 컴파일 시점에 NPE를 피해 null-safety하게 처리하기 위한 JSR 305 Annotations + Spring Nullability Annotation */
    compileKotlin {
        kotlinOptions {
            /**
             * freeCompilerArgs = ["-Xjsr305=strict"] 옵션
             * 컴파일 시점에 JSR 305 Annotations + Spring Nullability Annotation을 통해
             * Kotlin의 null-safety 기능 적용을 위한 컴파일러 옵션
             *  - 참고 URL : https://infoscis.github.io/2018/08/30/spring-boot-kotlin/
             */
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "11" // Kotlin의 기본 JVM target version이 1.6이므로 java version에 맞춰 compile 옵션 명시
        }
    }

    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "11"
        }
    }

    /**
     * Spring Boot Web Application 구성에 필요한 Kotlin 관련 의존성
     *  - kotlin-stdlib-jdk8 : jdk8이하의 feture들과 호환되는 Kotlin 표준 라이브러리를 제공
     *  - kotlin-reflect은 Kotlin 리플렉션 라이브러리입니다 (Spring Framework 5에서 필수).
     *  - jackson-module-kotlin은 Kotlin 클래스 및 데이터 클래스의 직렬화 / 비 직렬화에 대한 지원을 추가합니다 (단일 생성자 클래스는 자동으로 사용할 수 있고 보조 생성자 또는 정적 팩토리가 있는 클래스도 지원됩니다)
     */
    dependencies {
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
        implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
        implementation("org.jetbrains.kotlin:kotlin-reflect")

        implementation("io.github.microutils:kotlin-logging-jvm:2.0.6")

        testImplementation("org.springframework.boot:spring-boot-starter-test")
        testImplementation("org.springframework.boot:spring-boot-starter-test") {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }
}

configure(subprojects.findAll {it.name != 'core-module'}) {
    dependencies {
        compile project(':core-module')
    }
}
// [END] Root project build.gradle config